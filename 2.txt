import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("uber.csv")
df.head()

df.info()
df.columns

df = df.drop(['Unnamed: 0', 'key'], axis=1)
df.head(5)

df.describe()

df.isnull().sum()

df['dropoff_longitude'].fillna(value= df['dropoff_longitude'].median(), inplace = True)
df['dropoff_latitude'].fillna(value= df['dropoff_latitude'].mean(), inplace = True)

df.isnull().sum().sum()

df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'])

df.dtypes

df['year'] = df.pickup_datetime.dt.year
df['month'] = df.pickup_datetime.dt.month
df['dayofweek'] = df.pickup_datetime.dt.dayofweek
df['hour'] = df.pickup_datetime.dt.hour

from math import *
def distance_transform(longitude1, latitude1, longitude2, latitude2):
    travel_dist= []
    for pos in range(len(longitude1)):
        long1,lat1,long2,lat2= map(radians,[longitude1[pos],latitude1[pos],longitude2[pos],latitude2[pos]])
        dist_long= long2- long1
        dist_lat= lat2- lat1
        a= sin(dist_lat/2)**2 + cos(lat1) * cos(lat2) * sin(dist_long/2)**2
        c= 2 * asin(sqrt(a))*6371
        travel_dist.append(c)
    return travel_dist

df['dist_travel_km'] = distance_transform(df['pickup_longitude'].to_numpy(),
                                          df['pickup_latitude'].to_numpy(),
                                          df['dropoff_longitude'].to_numpy(),
                                          df['dropoff_latitude'].to_numpy() )

df.head(5)

df = df.drop('pickup_datetime', axis=1)

df.head(5)

df.plot(kind="box", subplots=True, layout = (7,2), figsize= (15,20))

def remove_outlier(df1, col):
    Q1 = df1[col].quantile(0.25)
    Q3 = df1[col].quantile(0.75)
    interQuantileRange = Q3 - Q1
    lowerLimit = Q1 - 1.5*interQuantileRange
    upperLimit = Q3 + 1.5*interQuantileRange
    df[col] = np.clip(df1[col], lowerLimit, upperLimit)
    return df1

def treat_all_outliers(df1, col_list):
    for c in col_list:
        df1 = remove_outlier(df, c)
    return df1

df = treat_all_outliers(df, df.iloc[: , 0::])

df.plot(kind="box", subplots=True, layout = (7,2), figsize= (15,20))

df= df.loc[(df.dist_travel_km>= 1) | (df.dist_travel_km<= 130)]
print("Remaining observastions in the dataset:", df.shape)

incorrect_coordinates= df.loc[(df.pickup_latitude> 90) |(df.pickup_latitude< -90) |
                              (df.dropoff_latitude> 90) |(df.dropoff_latitude< -90) |
                              (df.pickup_longitude> 180) |(df.pickup_longitude< -180) |
                              (df.dropoff_longitude> 180) |(df.dropoff_longitude< -180) ]

df.drop(incorrect_coordinates, inplace = True, errors='ignore')

df.head(5)

corr = df.corr()
corr

fig,axis= plt.subplots(figsize= (10,6))
sns.heatmap(df.corr(),annot= True)

x= df[['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','passenger_count','hour','month','year','dayofweek','dist_travel_km']]
y = df['fare_amount']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test= train_test_split(x,y,train_size=0.8, test_size=0.2, random_state=100)

from sklearn.linear_model import LinearRegression, Ridge, Lasso
regression= LinearRegression()
regression.fit(X_train,y_train)

prediction = regression.predict(X_test)
print(prediction)

y_test

from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error

r2_score(y_test,prediction)

MSE= mean_squared_error(y_test,prediction)
RMSE= np.sqrt(MSE)
RMSE

ridge_reg = Ridge(alpha=1.0)
ridge_reg.fit(X_train, y_train)
ridge_pred = ridge_reg.predict(X_test)

r2_score(y_test,ridge_pred)

lasso_reg = Lasso(alpha=1.0)
lasso_reg.fit(X_train, y_train)
lasso_pred = lasso_reg.predict(X_test)

r2_score(y_test, lasso_pred)

plt.scatter(y_test, prediction, label='Linear Regression', alpha=0.5)
plt.xlabel('True Price')
plt.ylabel('Predicted Price')
plt.legend()
plt.show()

plt.scatter(y_test, ridge_pred, label='Ridge Regression', alpha=0.5)
plt.xlabel('True Price')
plt.ylabel('Predicted Price')
plt.legend()
plt.show()

plt.scatter(y_test, lasso_pred, label='Lasso Regression', alpha=0.5)
plt.xlabel('True Price')
plt.ylabel('Predicted Price')
plt.legend()
plt.show()

plt.scatter(y_test, prediction, label='Linear Regression', alpha=0.5)
plt.scatter(y_test, ridge_pred, label='Ridge Regression', alpha=0.5)
plt.scatter(y_test, lasso_pred, label='Lasso Regression', alpha=0.5)
plt.xlabel('True Price')
plt.ylabel('Predicted Price')
plt.legend(loc="best")
plt.show()
